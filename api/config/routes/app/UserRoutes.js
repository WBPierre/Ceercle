const express = require("express");
const router = express.Router();
const UserController = require('../../../src/controllers/app/UserController');
const { isUserAuthenticated, isAdminUser } = require("../../../src/middlewares/AuthMiddleware");
const { verifyErrors } = require('../../../src/middlewares/ErrorMiddleware');

router.get('/', isAdminUser, UserController.listAllUsers);
router.get('/company/all', isAdminUser, UserController.getUserForCompany);
router.get('/userInTeam/:userId/:teamId', [isAdminUser, UserController.validate('getUserInTeam'), verifyErrors], UserController.getUserInTeam);
router.get('/namesForTeam/:teamIndex', [isAdminUser, UserController.validate('listAllUsersNamesForTeam'), verifyErrors], UserController.listAllUsersNamesForTeam);
router.get('/list/all', isUserAuthenticated, UserController.listGlossaryUsers);
router.get('/current', isUserAuthenticated, UserController.getUserInfo);
router.put('/general', [isUserAuthenticated, UserController.validate('updateUserGeneral'), verifyErrors], UserController.updateUserGeneral);
router.put('/password', [isUserAuthenticated, UserController.validate('updatePassword'), verifyErrors], UserController.updatePassword);
router.put('/settings', [isUserAuthenticated, UserController.validate('updateUserSettings'), verifyErrors], UserController.updateUserSettings);
router.post('/uploadProfile', [isUserAuthenticated], UserController.uploadProfile);
router.post("/resetPassword", [UserController.validate("resetPassword"), verifyErrors], UserController.resetPassword);
router.post('/uploadProfile', [isUserAuthenticated], UserController.uploadProfile);
router.post('/uploadProfile', [isUserAuthenticated], UserController.uploadProfile);
router.post('/uploadBanner', [isUserAuthenticated], UserController.uploadBanner);
router.get('/invitation/verify/:token', [UserController.validate('verifyInvitation'), verifyErrors], UserController.verifyInvitation);
router.post('/invitation/validate', [UserController.validate('createUserFromInvitation'), verifyErrors], UserController.createUserFromInvitation);
router.post('/invitation/create', [isAdminUser, UserController.validate('createInvitation'), verifyErrors], UserController.createInvitation);
router.get('/disable/:id', [isAdminUser, UserController.validate('disableUser'), verifyErrors], UserController.disableUser);
router.get('/userRules/:userId', [isAdminUser, UserController.validate('getUserRules'), verifyErrors], UserController.getUserRules);
router.post('/updateHasSpecificRules', [isAdminUser, UserController.validate('updateHasSpecificRules'), verifyErrors], UserController.updateHasSpecificRules);
router.post('/updateRulesValue', [isAdminUser, UserController.validate('updateRulesValue'), verifyErrors], UserController.updateRulesValue);
module.exports = router;